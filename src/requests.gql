mutation TokenAuth($username: String!, $password: String!) {
  tokenAuth(username: $username, password: $password) {
    token
    payload
    refreshToken
    refreshExpiresIn
    user {
      username
    }
  }
}

# mutation RevokeToken($refreshToken: String!) {
#   revokeToken(refreshToken: $refreshToken) {
#     revoked
#   }
# }

# mutation VerifyToken($token: String!) {
#   verifyToken(token: $token) {
#     payload
#   }
# }

mutation RefreshToken($refreshToken: String!) {
  refreshToken(refreshToken: $refreshToken) {
    token
    payload
    refreshToken
    refreshExpiresIn
  }
}

# mutation CreateUser($username: String!, $email: String!, $password: String!) {
#   createUser(username: $username, email: $email, password: $password) {
#     user {
#       username
#     }
#     refreshToken
#     token
#   }
# }

query CurrentUser {
  currentUser {
    username
  }
}

query GetComments(
  	$page_id: String!,
    $after: String,
  	$max_comments_at_toplevel: Int = 5,
  	$max_comments_per_sublevel: Int = 10
) {
    comments(page: $page_id, first: $max_comments_at_toplevel, after: $after) {
        ...commentConnectionFields
        edges { node { children(first: $max_comments_per_sublevel) {
            ...threeLevelsOfChildComments
        } } }
    }
}

query LoadMoreChildComments(
    $commentID: ID!,
    $after: String,
  	$max_comments_per_sublevel: Int = 10
) {
    comment(id: $commentID) {
        children(first: $max_comments_per_sublevel, after: $after) {
            ...threeLevelsOfChildComments
        }
    }
}

fragment threeLevelsOfChildComments on CommentNodeConnection {
    ...commentConnectionFields
    edges { node {
        children(first: $max_comments_per_sublevel) {
            ...commentConnectionFields
            edges { node {
                # Three levels shown by default is enough, amirite
                children(first: 0) {
                    ...commentConnectionFields
                }
            } }
        }
    } }
}

fragment commentConnectionFields on CommentNodeConnection {
    edges {
        node {
        ...commentFields
        }
    }
    pageInfo {
        endCursor
        hasNextPage
    }
}

fragment commentFields on CommentNode {
    id
    dateCreated
    dateEdited
    author {
        username
    }
    text
}
